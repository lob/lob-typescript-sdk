/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as Models from "./index";

import { BuckslipOrder } from "./buckslip-order";
import { Thumbnail } from "./thumbnail";

/**
 *
 * @export
 * @class Buckslip
 */
export class Buckslip {
  constructor(input?: any) {
    if (typeof input?.id !== "undefined") {
      this.id = input.id;
    }
    if (typeof input?.auto_reorder !== "undefined") {
      this.auto_reorder = input.auto_reorder;
    }
    if (typeof input?.reorder_quantity !== "undefined") {
      this.reorder_quantity = input.reorder_quantity;
    }
    if (typeof input?.threshold_amount !== "undefined") {
      this.threshold_amount = input.threshold_amount;
    }
    if (typeof input?.url !== "undefined") {
      this.url = input.url;
    }
    if (typeof input?.raw_url !== "undefined") {
      this.raw_url = input.raw_url;
    }
    if (typeof input?.front_original_url !== "undefined") {
      this.front_original_url = input.front_original_url;
    }
    if (typeof input?.back_original_url !== "undefined") {
      this.back_original_url = input.back_original_url;
    }
    if (typeof input?.thumbnails !== "undefined") {
      this.thumbnails = input.thumbnails;
    }
    if (typeof input?.available_quantity !== "undefined") {
      this.available_quantity = input.available_quantity;
    }
    if (typeof input?.allocated_quantity !== "undefined") {
      this.allocated_quantity = input.allocated_quantity;
    }
    if (typeof input?.onhand_quantity !== "undefined") {
      this.onhand_quantity = input.onhand_quantity;
    }
    if (typeof input?.pending_quantity !== "undefined") {
      this.pending_quantity = input.pending_quantity;
    }
    if (typeof input?.projected_quantity !== "undefined") {
      this.projected_quantity = input.projected_quantity;
    }
    if (typeof input?.buckslip_orders !== "undefined") {
      this.buckslip_orders = input.buckslip_orders;
    }
    if (typeof input?.stock !== "undefined") {
      this.stock = input.stock;
    }
    if (typeof input?.weight !== "undefined") {
      this.weight = input.weight;
    }
    if (typeof input?.finish !== "undefined") {
      this.finish = input.finish;
    }
    if (typeof input?.status !== "undefined") {
      this.status = input.status;
    }
    if (typeof input?.object !== "undefined") {
      this.object = input.object;
    }
    if (typeof input?.description !== "undefined") {
      this.description = input.description;
    }
    if (typeof input?.size !== "undefined") {
      this.size = input.size;
    }
  }

  /**
   * Unique identifier prefixed with `bck_`.
   * @type {string}
   * @memberof Buckslip
   */
  private "_id": string;
  public get id() {
    return this._id;
  }
  public set id(newValue: string) {
    if (newValue && !/^bck_[a-zA-Z0-9]+$/.test(newValue)) {
      throw new Error("Invalid id provided");
    }
    this._id = newValue;
  }

  /**
   * True if the buckslips should be auto-reordered.
   * @type {boolean}
   * @memberof Buckslip
   */
  "auto_reorder": boolean;

  /**
   * The number of buckslips to be reordered.
   * @type {number}
   * @memberof Buckslip
   */
  "reorder_quantity": number | null;

  /**
   * The threshold amount of the buckslip
   * @type {number}
   * @memberof Buckslip
   */
  "threshold_amount": number;

  /**
   * The signed link for the buckslip.
   * @type {string}
   * @memberof Buckslip
   */
  "url": string;

  /**
   * The raw URL of the buckslip.
   * @type {string}
   * @memberof Buckslip
   */
  "raw_url": string;

  /**
   * The original URL of the front template.
   * @type {string}
   * @memberof Buckslip
   */
  "front_original_url": string;

  /**
   * The original URL of the back template.
   * @type {string}
   * @memberof Buckslip
   */
  "back_original_url": string;

  /**
   *
   * @type {Array<Thumbnail>}
   * @memberof Buckslip
   */
  "thumbnails": Array<Thumbnail>;

  /**
   * The available quantity of buckslips.
   * @type {number}
   * @memberof Buckslip
   */
  "available_quantity": number;

  /**
   * The allocated quantity of buckslips.
   * @type {number}
   * @memberof Buckslip
   */
  "allocated_quantity": number;

  /**
   * The onhand quantity of buckslips.
   * @type {number}
   * @memberof Buckslip
   */
  "onhand_quantity": number;

  /**
   * The pending quantity of buckslips.
   * @type {number}
   * @memberof Buckslip
   */
  "pending_quantity": number;

  /**
   * The sum of pending and onhand quantities of buckslips.
   * @type {number}
   * @memberof Buckslip
   */
  "projected_quantity": number;

  /**
   * An array of buckslip orders that are associated with the buckslip.
   * @type {Array<BuckslipOrder>}
   * @memberof Buckslip
   */
  "buckslip_orders": Array<BuckslipOrder>;

  /**
   *
   * @type {string}
   * @memberof Buckslip
   */
  "stock": BuckslipStockEnum;

  /**
   *
   * @type {string}
   * @memberof Buckslip
   */
  "weight": BuckslipWeightEnum;

  /**
   *
   * @type {string}
   * @memberof Buckslip
   */
  "finish": BuckslipFinishEnum;

  /**
   *
   * @type {string}
   * @memberof Buckslip
   */
  "status": BuckslipStatusEnum;

  /**
   * object
   * @type {string}
   * @memberof Buckslip
   */
  "object": BuckslipObjectEnum;

  /**
   * Description of the buckslip.
   * @type {string}
   * @memberof Buckslip
   */
  "description": string | null;

  /**
   * The size of the buckslip
   * @type {string}
   * @memberof Buckslip
   */
  "size"?: BuckslipSizeEnum;

  public toJSON() {
    let out = {};
    for (const [key, value] of Object.entries(this)) {
      out = Object.assign({}, out, {
        [key[0] === "_" ? key.substr(1, key.length) : key]: value,
      });
    }
    return out;
  }
}

/**
 * @export
 * @enum {string}
 */
export enum BuckslipStockEnum {
  Text = "text",
  Cover = "cover",
}
/**
 * @export
 * @enum {string}
 */
export enum BuckslipWeightEnum {
  _80 = "80#",
}
/**
 * @export
 * @enum {string}
 */
export enum BuckslipFinishEnum {
  Gloss = "gloss",
  Matte = "matte",
}
/**
 * @export
 * @enum {string}
 */
export enum BuckslipStatusEnum {
  Processed = "processed",
  Rendered = "rendered",
}
/**
 * @export
 * @enum {string}
 */
export enum BuckslipObjectEnum {
  Buckslip = "buckslip",
}
/**
 * @export
 * @enum {string}
 */
export enum BuckslipSizeEnum {
  _875x375 = "8.75x3.75",
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
