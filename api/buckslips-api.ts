/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
import FormData = require("form-data");
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
  valueToString,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { Buckslip } from "../models";
// @ts-ignore
import { BuckslipDeletion } from "../models";
// @ts-ignore
import { BuckslipEditable } from "../models";
// @ts-ignore
import { BuckslipUpdatable } from "../models";
// @ts-ignore
import { BuckslipsList } from "../models";
// @ts-ignore
import { LobError } from "../models";
/**
 * BuckslipsApi - axios parameter creator
 * @export
 */
export const BuckslipsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Creates a new buckslip given information
     * @summary Create
     * @param {BuckslipEditable} buckslipEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buckslipCreate: async (
      buckslipEditable: BuckslipEditable,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'buckslipEditable' is not null or undefined
      assertParamExists("buckslipCreate", "buckslipEditable", buckslipEditable);
      const localVarPath = `/buckslips`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        buckslipEditable,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
     * @summary Delete
     * @param {string} buckslipId id of the buckslip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buckslipDelete: async (
      buckslipId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'buckslipId' is not null or undefined
      assertParamExists("buckslipDelete", "buckslipId", buckslipId);
      const localVarPath = `/buckslips/{buckslip_id}`.replace(
        `{${"buckslip_id"}}`,
        encodeURIComponent(String(buckslipId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves the details of an existing buckslip. You need only supply the unique customer identifier that was returned upon buckslip creation.
     * @summary Retrieve
     * @param {string} buckslipId id of the buckslip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buckslipRetrieve: async (
      buckslipId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'buckslipId' is not null or undefined
      assertParamExists("buckslipRetrieve", "buckslipId", buckslipId);
      const localVarPath = `/buckslips/{buckslip_id}`.replace(
        `{${"buckslip_id"}}`,
        encodeURIComponent(String(buckslipId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update the details of an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
     * @summary Update
     * @param {string} buckslipId id of the buckslip
     * @param {BuckslipUpdatable} buckslipUpdatable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buckslipUpdate: async (
      buckslipId: string,
      buckslipUpdatable: BuckslipUpdatable,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'buckslipId' is not null or undefined
      assertParamExists("buckslipUpdate", "buckslipId", buckslipId);
      // verify required parameter 'buckslipUpdatable' is not null or undefined
      assertParamExists(
        "buckslipUpdate",
        "buckslipUpdatable",
        buckslipUpdatable
      );
      const localVarPath = `/buckslips/{buckslip_id}`.replace(
        `{${"buckslip_id"}}`,
        encodeURIComponent(String(buckslipId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        buckslipUpdatable,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a list of your buckslips. The buckslips are returned sorted by creation date, with the most recently created buckslips appearing first.
     * @summary List
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buckslipsList: async (
      limit?: number,
      before?: string,
      after?: string,
      include?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/buckslips`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (before !== undefined) {
        localVarQueryParameter["before"] = before;
      }

      if (after !== undefined) {
        localVarQueryParameter["after"] = after;
      }

      if (include) {
        localVarQueryParameter["include"] = valueToString(include);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BuckslipsApi - functional programming interface
 * @export
 */
export const BuckslipsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    BuckslipsApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new buckslip given information
     * @summary Create
     * @param {BuckslipEditable} buckslipEditable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buckslipCreate(
      buckslipEditable: BuckslipEditable,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Buckslip>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buckslipCreate(
        buckslipEditable,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
     * @summary Delete
     * @param {string} buckslipId id of the buckslip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buckslipDelete(
      buckslipId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BuckslipDeletion>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buckslipDelete(
        buckslipId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retrieves the details of an existing buckslip. You need only supply the unique customer identifier that was returned upon buckslip creation.
     * @summary Retrieve
     * @param {string} buckslipId id of the buckslip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buckslipRetrieve(
      buckslipId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Buckslip>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.buckslipRetrieve(buckslipId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update the details of an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
     * @summary Update
     * @param {string} buckslipId id of the buckslip
     * @param {BuckslipUpdatable} buckslipUpdatable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buckslipUpdate(
      buckslipId: string,
      buckslipUpdatable: BuckslipUpdatable,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Buckslip>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buckslipUpdate(
        buckslipId,
        buckslipUpdatable,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns a list of your buckslips. The buckslips are returned sorted by creation date, with the most recently created buckslips appearing first.
     * @summary List
     * @param {number} [limit] How many results to return.
     * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
     * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
     * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buckslipsList(
      limit?: number,
      before?: string,
      after?: string,
      include?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuckslipsList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buckslipsList(
        limit,
        before,
        after,
        include,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * BuckslipsApi - object-oriented interface
 * @export
 * @class BuckslipsApi
 * @extends {BaseAPI}
 */
export class BuckslipsApi extends BaseAPI {
  /**
   * Creates a new buckslip given information
   * @summary Create
   * @param {BuckslipEditable} buckslipEditable
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuckslipsApi
   */
  public Create(
    buckslipEditable: BuckslipEditable,
    options?: AxiosRequestConfig
  ) {
    return BuckslipsApiFp(this.configuration)
      .buckslipCreate(buckslipEditable, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new Buckslip(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }

  /**
   * Delete an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
   * @summary Delete
   * @param {string} buckslipId id of the buckslip
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuckslipsApi
   */
  public Delete(buckslipId: string, options?: AxiosRequestConfig) {
    return BuckslipsApiFp(this.configuration)
      .buckslipDelete(buckslipId, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new BuckslipDeletion(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }

  /**
   * Retrieves the details of an existing buckslip. You need only supply the unique customer identifier that was returned upon buckslip creation.
   * @summary Retrieve
   * @param {string} buckslipId id of the buckslip
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuckslipsApi
   */
  public Retrieve(buckslipId: string, options?: AxiosRequestConfig) {
    return BuckslipsApiFp(this.configuration)
      .buckslipRetrieve(buckslipId, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new Buckslip(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }

  /**
   * Update the details of an existing buckslip. You need only supply the unique identifier that was returned upon buckslip creation.
   * @summary Update
   * @param {string} buckslipId id of the buckslip
   * @param {BuckslipUpdatable} buckslipUpdatable
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuckslipsApi
   */
  public Update(
    buckslipId: string,
    buckslipUpdatable: BuckslipUpdatable,
    options?: AxiosRequestConfig
  ) {
    return BuckslipsApiFp(this.configuration)
      .buckslipUpdate(buckslipId, buckslipUpdatable, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new Buckslip(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }

  /**
   * Returns a list of your buckslips. The buckslips are returned sorted by creation date, with the most recently created buckslips appearing first.
   * @summary List
   * @param {number} [limit] How many results to return.
   * @param {string} [before] A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.
   * @param {string} [after] A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.
   * @param {Array<string>} [include] Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BuckslipsApi
   */
  public List(
    limit?: number,
    before?: string,
    after?: string,
    include?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return BuckslipsApiFp(this.configuration)
      .buckslipsList(limit, before, after, include, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new BuckslipsList(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
