/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
import FormData = require("form-data");
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
  valueToString,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { UsCsvVerificationsResponse } from "../models";
/**
 * USVerificationsApi - axios parameter creator
 * @export
 */
export const USVerificationsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Verify a CSV of US or US territory addresses _with a live API key_. A completed CSV will be emailed to your account once the cleansing and verification process is finished. It\'s reccomended that your CSV file is under 250k lines. The endpoint requires a `csv_file` and the index of your column headers. The columns should be 1-indexed  For example if you have a CSV with address primary lines in the first column and all postal codes in the 5th column, pass in `primary_line_mapping` as 1 and `postal_code_mapping` as 5.
     * @summary UsCsvVerificationsResponse
     * @param {number} [recipientMapping] The index of the recipient column.
     * @param {number} [primaryLineMapping] The index of the primary line column.
     * @param {number} [secondaryLineMapping] The index of the secondary line column.
     * @param {number} [cityMapping] The index of the city column. &#x60;city_mapping&#x60; and &#x60;state_mapping&#x60; are required if no &#x60;postal_code_mapping&#x60; is passed.
     * @param {number} [stateMapping] The index of the state column. &#x60;city_mapping&#x60; and &#x60;state_mapping&#x60; are required if no &#x60;postal_code_mapping&#x60; is passed.
     * @param {number} [postalCodeMapping] The index of the postal_code column. &#x60;postal_code_mapping&#x60; is required if no &#x60;state_mapping&#x60; or &#x60;city_mapping&#x60;  is passed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usCsvVerifications: async (
      recipientMapping?: number,
      primaryLineMapping?: number,
      secondaryLineMapping?: number,
      cityMapping?: number,
      stateMapping?: number,
      postalCodeMapping?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/us_csv_verifications`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      if (recipientMapping !== undefined) {
        localVarFormParams.append("recipient_mapping", recipientMapping as any);
      }

      if (primaryLineMapping !== undefined) {
        localVarFormParams.append(
          "primary_line_mapping",
          primaryLineMapping as any
        );
      }

      if (secondaryLineMapping !== undefined) {
        localVarFormParams.append(
          "secondary_line_mapping",
          secondaryLineMapping as any
        );
      }

      if (cityMapping !== undefined) {
        localVarFormParams.append("city_mapping", cityMapping as any);
      }

      if (stateMapping !== undefined) {
        localVarFormParams.append("state_mapping", stateMapping as any);
      }

      if (postalCodeMapping !== undefined) {
        localVarFormParams.append(
          "postal_code_mapping",
          postalCodeMapping as any
        );
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * USVerificationsApi - functional programming interface
 * @export
 */
export const USVerificationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    USVerificationsApiAxiosParamCreator(configuration);
  return {
    /**
     * Verify a CSV of US or US territory addresses _with a live API key_. A completed CSV will be emailed to your account once the cleansing and verification process is finished. It\'s reccomended that your CSV file is under 250k lines. The endpoint requires a `csv_file` and the index of your column headers. The columns should be 1-indexed  For example if you have a CSV with address primary lines in the first column and all postal codes in the 5th column, pass in `primary_line_mapping` as 1 and `postal_code_mapping` as 5.
     * @summary UsCsvVerificationsResponse
     * @param {number} [recipientMapping] The index of the recipient column.
     * @param {number} [primaryLineMapping] The index of the primary line column.
     * @param {number} [secondaryLineMapping] The index of the secondary line column.
     * @param {number} [cityMapping] The index of the city column. &#x60;city_mapping&#x60; and &#x60;state_mapping&#x60; are required if no &#x60;postal_code_mapping&#x60; is passed.
     * @param {number} [stateMapping] The index of the state column. &#x60;city_mapping&#x60; and &#x60;state_mapping&#x60; are required if no &#x60;postal_code_mapping&#x60; is passed.
     * @param {number} [postalCodeMapping] The index of the postal_code column. &#x60;postal_code_mapping&#x60; is required if no &#x60;state_mapping&#x60; or &#x60;city_mapping&#x60;  is passed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usCsvVerifications(
      recipientMapping?: number,
      primaryLineMapping?: number,
      secondaryLineMapping?: number,
      cityMapping?: number,
      stateMapping?: number,
      postalCodeMapping?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsCsvVerificationsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usCsvVerifications(
          recipientMapping,
          primaryLineMapping,
          secondaryLineMapping,
          cityMapping,
          stateMapping,
          postalCodeMapping,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * USVerificationsApi - object-oriented interface
 * @export
 * @class USVerificationsApi
 * @extends {BaseAPI}
 */
export class USVerificationsApi extends BaseAPI {
  /**
   * Verify a CSV of US or US territory addresses _with a live API key_. A completed CSV will be emailed to your account once the cleansing and verification process is finished. It\'s reccomended that your CSV file is under 250k lines. The endpoint requires a `csv_file` and the index of your column headers. The columns should be 1-indexed  For example if you have a CSV with address primary lines in the first column and all postal codes in the 5th column, pass in `primary_line_mapping` as 1 and `postal_code_mapping` as 5.
   * @summary UsCsvVerificationsResponse
   * @param {number} [recipientMapping] The index of the recipient column.
   * @param {number} [primaryLineMapping] The index of the primary line column.
   * @param {number} [secondaryLineMapping] The index of the secondary line column.
   * @param {number} [cityMapping] The index of the city column. &#x60;city_mapping&#x60; and &#x60;state_mapping&#x60; are required if no &#x60;postal_code_mapping&#x60; is passed.
   * @param {number} [stateMapping] The index of the state column. &#x60;city_mapping&#x60; and &#x60;state_mapping&#x60; are required if no &#x60;postal_code_mapping&#x60; is passed.
   * @param {number} [postalCodeMapping] The index of the postal_code column. &#x60;postal_code_mapping&#x60; is required if no &#x60;state_mapping&#x60; or &#x60;city_mapping&#x60;  is passed.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof USVerificationsApi
   */
  public UsCsvVerificationsResponse(
    recipientMapping?: number,
    primaryLineMapping?: number,
    secondaryLineMapping?: number,
    cityMapping?: number,
    stateMapping?: number,
    postalCodeMapping?: number,
    options?: AxiosRequestConfig
  ) {
    return USVerificationsApiFp(this.configuration)
      .usCsvVerifications(
        recipientMapping,
        primaryLineMapping,
        secondaryLineMapping,
        cityMapping,
        stateMapping,
        postalCodeMapping,
        options
      )
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new UsCsvVerificationsResponse(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
