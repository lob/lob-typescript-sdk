/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
import FormData = require("form-data");
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
  valueToString,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { CreativePatch } from "../models";
// @ts-ignore
import { CreativeResponse } from "../models";
// @ts-ignore
import { CreativeWritable } from "../models";
// @ts-ignore
import { LobError } from "../models";
/**
 * CreativesApi - axios parameter creator
 * @export
 */
export const CreativesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Creates a new creative with the provided properties
     * @summary create
     * @param {CreativeWritable} creativeWritable
     * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeCreate: async (
      creativeWritable: CreativeWritable,
      xLangOutput?: "native" | "match",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'creativeWritable' is not null or undefined
      assertParamExists("creativeCreate", "creativeWritable", creativeWritable);
      const localVarPath = `/creatives`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      if (xLangOutput !== undefined && xLangOutput !== null) {
        localVarHeaderParameter["x-lang-output"] = String(xLangOutput);
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        creativeWritable,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves the details of an existing creative. You need only supply the unique creative identifier that was returned upon creative creation.
     * @summary get
     * @param {string} crvId id of the creative
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeRetrieve: async (
      crvId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'crvId' is not null or undefined
      assertParamExists("creativeRetrieve", "crvId", crvId);
      const localVarPath = `/creatives/{crv_id}`.replace(
        `{${"crv_id"}}`,
        encodeURIComponent(String(crvId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update the details of an existing creative. You need only supply the unique identifier that was returned upon creative creation.
     * @summary update
     * @param {string} crvId id of the creative
     * @param {CreativePatch} creativePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creativeUpdate: async (
      crvId: string,
      creativePatch: CreativePatch,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'crvId' is not null or undefined
      assertParamExists("creativeUpdate", "crvId", crvId);
      // verify required parameter 'creativePatch' is not null or undefined
      assertParamExists("creativeUpdate", "creativePatch", creativePatch);
      const localVarPath = `/creatives/{crv_id}`.replace(
        `{${"crv_id"}}`,
        encodeURIComponent(String(crvId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        creativePatch,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CreativesApi - functional programming interface
 * @export
 */
export const CreativesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CreativesApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new creative with the provided properties
     * @summary create
     * @param {CreativeWritable} creativeWritable
     * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async creativeCreate(
      creativeWritable: CreativeWritable,
      xLangOutput?: "native" | "match",
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreativeResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.creativeCreate(
        creativeWritable,
        xLangOutput,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retrieves the details of an existing creative. You need only supply the unique creative identifier that was returned upon creative creation.
     * @summary get
     * @param {string} crvId id of the creative
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async creativeRetrieve(
      crvId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreativeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.creativeRetrieve(crvId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update the details of an existing creative. You need only supply the unique identifier that was returned upon creative creation.
     * @summary update
     * @param {string} crvId id of the creative
     * @param {CreativePatch} creativePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async creativeUpdate(
      crvId: string,
      creativePatch: CreativePatch,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreativeResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.creativeUpdate(
        crvId,
        creativePatch,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CreativesApi - object-oriented interface
 * @export
 * @class CreativesApi
 * @extends {BaseAPI}
 */
export class CreativesApi extends BaseAPI {
  /**
   * Creates a new creative with the provided properties
   * @summary create
   * @param {CreativeWritable} creativeWritable
   * @param {'native' | 'match'} [xLangOutput] * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreativesApi
   */
  public create(
    creativeWritable: CreativeWritable,
    xLangOutput?: "native" | "match",
    options?: AxiosRequestConfig
  ) {
    return CreativesApiFp(this.configuration)
      .creativeCreate(creativeWritable, xLangOutput, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new CreativeResponse(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }

  /**
   * Retrieves the details of an existing creative. You need only supply the unique creative identifier that was returned upon creative creation.
   * @summary get
   * @param {string} crvId id of the creative
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreativesApi
   */
  public get(crvId: string, options?: AxiosRequestConfig) {
    return CreativesApiFp(this.configuration)
      .creativeRetrieve(crvId, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new CreativeResponse(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }

  /**
   * Update the details of an existing creative. You need only supply the unique identifier that was returned upon creative creation.
   * @summary update
   * @param {string} crvId id of the creative
   * @param {CreativePatch} creativePatch
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreativesApi
   */
  public update(
    crvId: string,
    creativePatch: CreativePatch,
    options?: AxiosRequestConfig
  ) {
    return CreativesApiFp(this.configuration)
      .creativeUpdate(crvId, creativePatch, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new CreativeResponse(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
