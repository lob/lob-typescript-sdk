/* tslint:disable */
/* eslint-disable */
/**
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
import FormData = require("form-data");
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
  valueToString,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { LobError } from "../models";
// @ts-ignore
import { UsAutocompletions } from "../models";
// @ts-ignore
import { UsAutocompletionsWritable } from "../models";
/**
 * UsAutocompletionsApi - axios parameter creator
 * @export
 */
export const UsAutocompletionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/verification_us).
     * @summary autocomplete
     * @param {UsAutocompletionsWritable} usAutocompletionsWritable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usAutocompletion: async (
      usAutocompletionsWritable: UsAutocompletionsWritable,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'usAutocompletionsWritable' is not null or undefined
      assertParamExists(
        "usAutocompletion",
        "usAutocompletionsWritable",
        usAutocompletionsWritable
      );
      const localVarPath = `/us_autocompletions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usAutocompletionsWritable,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsAutocompletionsApi - functional programming interface
 * @export
 */
export const UsAutocompletionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UsAutocompletionsApiAxiosParamCreator(configuration);
  return {
    /**
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/verification_us).
     * @summary autocomplete
     * @param {UsAutocompletionsWritable} usAutocompletionsWritable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usAutocompletion(
      usAutocompletionsWritable: UsAutocompletionsWritable,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsAutocompletions>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usAutocompletion(
          usAutocompletionsWritable,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UsAutocompletionsApi - object-oriented interface
 * @export
 * @class UsAutocompletionsApi
 * @extends {BaseAPI}
 */
export class UsAutocompletionsApi extends BaseAPI {
  /**
   * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they\'ll need to be [verified](#operation/verification_us).
   * @summary autocomplete
   * @param {UsAutocompletionsWritable} usAutocompletionsWritable
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsAutocompletionsApi
   */
  public autocomplete(
    usAutocompletionsWritable: UsAutocompletionsWritable,
    options?: AxiosRequestConfig
  ) {
    return UsAutocompletionsApiFp(this.configuration)
      .usAutocompletion(usAutocompletionsWritable, options)
      .then((request) => request(this.axios, this.basePath))
      .then(function (response) {
        return new UsAutocompletions(response.data);
      })
      .catch((error) => {
        if (error.response?.data?.error?.message) {
          error.message = error.response.data.error.message;
        }
        throw error;
      });
  }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
